// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"context"

	mock "github.com/stretchr/testify/mock"
	"github.com/vvwind/2025-MAI-Backend-V-Vetrov/internal/model"
)

// NewMockProductService creates a new instance of MockProductService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProductService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProductService {
	mock := &MockProductService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProductService is an autogenerated mock type for the ProductService type
type MockProductService struct {
	mock.Mock
}

type MockProductService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProductService) EXPECT() *MockProductService_Expecter {
	return &MockProductService_Expecter{mock: &_m.Mock}
}

// AddToCart provides a mock function for the type MockProductService
func (_mock *MockProductService) AddToCart(ctx context.Context, productID int64, userID int64) error {
	ret := _mock.Called(ctx, productID, userID)

	if len(ret) == 0 {
		panic("no return value specified for AddToCart")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = returnFunc(ctx, productID, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductService_AddToCart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddToCart'
type MockProductService_AddToCart_Call struct {
	*mock.Call
}

// AddToCart is a helper method to define mock.On call
//   - ctx
//   - productID
//   - userID
func (_e *MockProductService_Expecter) AddToCart(ctx interface{}, productID interface{}, userID interface{}) *MockProductService_AddToCart_Call {
	return &MockProductService_AddToCart_Call{Call: _e.mock.On("AddToCart", ctx, productID, userID)}
}

func (_c *MockProductService_AddToCart_Call) Run(run func(ctx context.Context, productID int64, userID int64)) *MockProductService_AddToCart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockProductService_AddToCart_Call) Return(err error) *MockProductService_AddToCart_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductService_AddToCart_Call) RunAndReturn(run func(ctx context.Context, productID int64, userID int64) error) *MockProductService_AddToCart_Call {
	_c.Call.Return(run)
	return _c
}

// BuyProduct provides a mock function for the type MockProductService
func (_mock *MockProductService) BuyProduct(ctx context.Context, productID int64, userID int64) error {
	ret := _mock.Called(ctx, productID, userID)

	if len(ret) == 0 {
		panic("no return value specified for BuyProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64, int64) error); ok {
		r0 = returnFunc(ctx, productID, userID)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductService_BuyProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuyProduct'
type MockProductService_BuyProduct_Call struct {
	*mock.Call
}

// BuyProduct is a helper method to define mock.On call
//   - ctx
//   - productID
//   - userID
func (_e *MockProductService_Expecter) BuyProduct(ctx interface{}, productID interface{}, userID interface{}) *MockProductService_BuyProduct_Call {
	return &MockProductService_BuyProduct_Call{Call: _e.mock.On("BuyProduct", ctx, productID, userID)}
}

func (_c *MockProductService_BuyProduct_Call) Run(run func(ctx context.Context, productID int64, userID int64)) *MockProductService_BuyProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64), args[2].(int64))
	})
	return _c
}

func (_c *MockProductService_BuyProduct_Call) Return(err error) *MockProductService_BuyProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductService_BuyProduct_Call) RunAndReturn(run func(ctx context.Context, productID int64, userID int64) error) *MockProductService_BuyProduct_Call {
	_c.Call.Return(run)
	return _c
}

// CreateProduct provides a mock function for the type MockProductService
func (_mock *MockProductService) CreateProduct(ctx context.Context, ProductReq model.CreateProductRequest, seller model.User) (int64, error) {
	ret := _mock.Called(ctx, ProductReq, seller)

	if len(ret) == 0 {
		panic("no return value specified for CreateProduct")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CreateProductRequest, model.User) (int64, error)); ok {
		return returnFunc(ctx, ProductReq, seller)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.CreateProductRequest, model.User) int64); ok {
		r0 = returnFunc(ctx, ProductReq, seller)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.CreateProductRequest, model.User) error); ok {
		r1 = returnFunc(ctx, ProductReq, seller)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_CreateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProduct'
type MockProductService_CreateProduct_Call struct {
	*mock.Call
}

// CreateProduct is a helper method to define mock.On call
//   - ctx
//   - ProductReq
//   - seller
func (_e *MockProductService_Expecter) CreateProduct(ctx interface{}, ProductReq interface{}, seller interface{}) *MockProductService_CreateProduct_Call {
	return &MockProductService_CreateProduct_Call{Call: _e.mock.On("CreateProduct", ctx, ProductReq, seller)}
}

func (_c *MockProductService_CreateProduct_Call) Run(run func(ctx context.Context, ProductReq model.CreateProductRequest, seller model.User)) *MockProductService_CreateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.CreateProductRequest), args[2].(model.User))
	})
	return _c
}

func (_c *MockProductService_CreateProduct_Call) Return(n int64, err error) *MockProductService_CreateProduct_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockProductService_CreateProduct_Call) RunAndReturn(run func(ctx context.Context, ProductReq model.CreateProductRequest, seller model.User) (int64, error)) *MockProductService_CreateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteProduct provides a mock function for the type MockProductService
func (_mock *MockProductService) DeleteProduct(ctx context.Context, id int64) error {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteProduct")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = returnFunc(ctx, id)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProductService_DeleteProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProduct'
type MockProductService_DeleteProduct_Call struct {
	*mock.Call
}

// DeleteProduct is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProductService_Expecter) DeleteProduct(ctx interface{}, id interface{}) *MockProductService_DeleteProduct_Call {
	return &MockProductService_DeleteProduct_Call{Call: _e.mock.On("DeleteProduct", ctx, id)}
}

func (_c *MockProductService_DeleteProduct_Call) Run(run func(ctx context.Context, id int64)) *MockProductService_DeleteProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockProductService_DeleteProduct_Call) Return(err error) *MockProductService_DeleteProduct_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProductService_DeleteProduct_Call) RunAndReturn(run func(ctx context.Context, id int64) error) *MockProductService_DeleteProduct_Call {
	_c.Call.Return(run)
	return _c
}

// GetAllProducts provides a mock function for the type MockProductService
func (_mock *MockProductService) GetAllProducts(ctx context.Context) ([]model.Product, error) {
	ret := _mock.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []model.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context) ([]model.Product, error)); ok {
		return returnFunc(ctx)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context) []model.Product); ok {
		r0 = returnFunc(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = returnFunc(ctx)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_GetAllProducts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProducts'
type MockProductService_GetAllProducts_Call struct {
	*mock.Call
}

// GetAllProducts is a helper method to define mock.On call
//   - ctx
func (_e *MockProductService_Expecter) GetAllProducts(ctx interface{}) *MockProductService_GetAllProducts_Call {
	return &MockProductService_GetAllProducts_Call{Call: _e.mock.On("GetAllProducts", ctx)}
}

func (_c *MockProductService_GetAllProducts_Call) Run(run func(ctx context.Context)) *MockProductService_GetAllProducts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockProductService_GetAllProducts_Call) Return(products []model.Product, err error) *MockProductService_GetAllProducts_Call {
	_c.Call.Return(products, err)
	return _c
}

func (_c *MockProductService_GetAllProducts_Call) RunAndReturn(run func(ctx context.Context) ([]model.Product, error)) *MockProductService_GetAllProducts_Call {
	_c.Call.Return(run)
	return _c
}

// GetProductByID provides a mock function for the type MockProductService
func (_mock *MockProductService) GetProductByID(ctx context.Context, id int64) (*model.Product, error) {
	ret := _mock.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetProductByID")
	}

	var r0 *model.Product
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) (*model.Product, error)); ok {
		return returnFunc(ctx, id)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, int64) *model.Product); ok {
		r0 = returnFunc(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Product)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = returnFunc(ctx, id)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_GetProductByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProductByID'
type MockProductService_GetProductByID_Call struct {
	*mock.Call
}

// GetProductByID is a helper method to define mock.On call
//   - ctx
//   - id
func (_e *MockProductService_Expecter) GetProductByID(ctx interface{}, id interface{}) *MockProductService_GetProductByID_Call {
	return &MockProductService_GetProductByID_Call{Call: _e.mock.On("GetProductByID", ctx, id)}
}

func (_c *MockProductService_GetProductByID_Call) Run(run func(ctx context.Context, id int64)) *MockProductService_GetProductByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *MockProductService_GetProductByID_Call) Return(product *model.Product, err error) *MockProductService_GetProductByID_Call {
	_c.Call.Return(product, err)
	return _c
}

func (_c *MockProductService_GetProductByID_Call) RunAndReturn(run func(ctx context.Context, id int64) (*model.Product, error)) *MockProductService_GetProductByID_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateProduct provides a mock function for the type MockProductService
func (_mock *MockProductService) UpdateProduct(ctx context.Context, productReq model.UpdateProductRequest, productID int64, userID int64) (int64, error) {
	ret := _mock.Called(ctx, productReq, productID, userID)

	if len(ret) == 0 {
		panic("no return value specified for UpdateProduct")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UpdateProductRequest, int64, int64) (int64, error)); ok {
		return returnFunc(ctx, productReq, productID, userID)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UpdateProductRequest, int64, int64) int64); ok {
		r0 = returnFunc(ctx, productReq, productID, userID)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UpdateProductRequest, int64, int64) error); ok {
		r1 = returnFunc(ctx, productReq, productID, userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockProductService_UpdateProduct_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProduct'
type MockProductService_UpdateProduct_Call struct {
	*mock.Call
}

// UpdateProduct is a helper method to define mock.On call
//   - ctx
//   - productReq
//   - productID
//   - userID
func (_e *MockProductService_Expecter) UpdateProduct(ctx interface{}, productReq interface{}, productID interface{}, userID interface{}) *MockProductService_UpdateProduct_Call {
	return &MockProductService_UpdateProduct_Call{Call: _e.mock.On("UpdateProduct", ctx, productReq, productID, userID)}
}

func (_c *MockProductService_UpdateProduct_Call) Run(run func(ctx context.Context, productReq model.UpdateProductRequest, productID int64, userID int64)) *MockProductService_UpdateProduct_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UpdateProductRequest), args[2].(int64), args[3].(int64))
	})
	return _c
}

func (_c *MockProductService_UpdateProduct_Call) Return(n int64, err error) *MockProductService_UpdateProduct_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockProductService_UpdateProduct_Call) RunAndReturn(run func(ctx context.Context, productReq model.UpdateProductRequest, productID int64, userID int64) (int64, error)) *MockProductService_UpdateProduct_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserService creates a new instance of MockUserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserService {
	mock := &MockUserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockUserService is an autogenerated mock type for the UserService type
type MockUserService struct {
	mock.Mock
}

type MockUserService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserService) EXPECT() *MockUserService_Expecter {
	return &MockUserService_Expecter{mock: &_m.Mock}
}

// CreateUser provides a mock function for the type MockUserService
func (_mock *MockUserService) CreateUser(ctx context.Context, usr model.UserRegister, hashedPassword string) (int64, error) {
	ret := _mock.Called(ctx, usr, hashedPassword)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 int64
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserRegister, string) (int64, error)); ok {
		return returnFunc(ctx, usr, hashedPassword)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserRegister, string) int64); ok {
		r0 = returnFunc(ctx, usr, hashedPassword)
	} else {
		r0 = ret.Get(0).(int64)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserRegister, string) error); ok {
		r1 = returnFunc(ctx, usr, hashedPassword)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_CreateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateUser'
type MockUserService_CreateUser_Call struct {
	*mock.Call
}

// CreateUser is a helper method to define mock.On call
//   - ctx
//   - usr
//   - hashedPassword
func (_e *MockUserService_Expecter) CreateUser(ctx interface{}, usr interface{}, hashedPassword interface{}) *MockUserService_CreateUser_Call {
	return &MockUserService_CreateUser_Call{Call: _e.mock.On("CreateUser", ctx, usr, hashedPassword)}
}

func (_c *MockUserService_CreateUser_Call) Run(run func(ctx context.Context, usr model.UserRegister, hashedPassword string)) *MockUserService_CreateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserRegister), args[2].(string))
	})
	return _c
}

func (_c *MockUserService_CreateUser_Call) Return(n int64, err error) *MockUserService_CreateUser_Call {
	_c.Call.Return(n, err)
	return _c
}

func (_c *MockUserService_CreateUser_Call) RunAndReturn(run func(ctx context.Context, usr model.UserRegister, hashedPassword string) (int64, error)) *MockUserService_CreateUser_Call {
	_c.Call.Return(run)
	return _c
}

// GetUserByEmail provides a mock function for the type MockUserService
func (_mock *MockUserService) GetUserByEmail(ctx context.Context, email string) (*model.User, error) {
	ret := _mock.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *model.User
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) (*model.User, error)); ok {
		return returnFunc(ctx, email)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, string) *model.User); ok {
		r0 = returnFunc(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = returnFunc(ctx, email)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_GetUserByEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUserByEmail'
type MockUserService_GetUserByEmail_Call struct {
	*mock.Call
}

// GetUserByEmail is a helper method to define mock.On call
//   - ctx
//   - email
func (_e *MockUserService_Expecter) GetUserByEmail(ctx interface{}, email interface{}) *MockUserService_GetUserByEmail_Call {
	return &MockUserService_GetUserByEmail_Call{Call: _e.mock.On("GetUserByEmail", ctx, email)}
}

func (_c *MockUserService_GetUserByEmail_Call) Run(run func(ctx context.Context, email string)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) Return(user *model.User, err error) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(user, err)
	return _c
}

func (_c *MockUserService_GetUserByEmail_Call) RunAndReturn(run func(ctx context.Context, email string) (*model.User, error)) *MockUserService_GetUserByEmail_Call {
	_c.Call.Return(run)
	return _c
}

// LoginUser provides a mock function for the type MockUserService
func (_mock *MockUserService) LoginUser(ctx context.Context, usr model.UserLogin) (string, error) {
	ret := _mock.Called(ctx, usr)

	if len(ret) == 0 {
		panic("no return value specified for LoginUser")
	}

	var r0 string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserLogin) (string, error)); ok {
		return returnFunc(ctx, usr)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, model.UserLogin) string); ok {
		r0 = returnFunc(ctx, usr)
	} else {
		r0 = ret.Get(0).(string)
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, model.UserLogin) error); ok {
		r1 = returnFunc(ctx, usr)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockUserService_LoginUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoginUser'
type MockUserService_LoginUser_Call struct {
	*mock.Call
}

// LoginUser is a helper method to define mock.On call
//   - ctx
//   - usr
func (_e *MockUserService_Expecter) LoginUser(ctx interface{}, usr interface{}) *MockUserService_LoginUser_Call {
	return &MockUserService_LoginUser_Call{Call: _e.mock.On("LoginUser", ctx, usr)}
}

func (_c *MockUserService_LoginUser_Call) Run(run func(ctx context.Context, usr model.UserLogin)) *MockUserService_LoginUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.UserLogin))
	})
	return _c
}

func (_c *MockUserService_LoginUser_Call) Return(s string, err error) *MockUserService_LoginUser_Call {
	_c.Call.Return(s, err)
	return _c
}

func (_c *MockUserService_LoginUser_Call) RunAndReturn(run func(ctx context.Context, usr model.UserLogin) (string, error)) *MockUserService_LoginUser_Call {
	_c.Call.Return(run)
	return _c
}
